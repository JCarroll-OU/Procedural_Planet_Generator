using System.Collections.Generic;
using UnityEngine;

// The planet consists of 6 faces that are deformed to make a sphere which is then displaced with noise. 
// This serves as a wrapper for the LOD and jobs systems.
public class PlanetFace
{
    // Local up defined the direction your head should point if you stood on the surface of this face.
    public Vector3 localUp;
    // If local up is the y-direction (how Unity defines it) then this is the x-direction.
    public Vector3 axisA;
    // Again, if local up is the y-direction, then this is the z-direction. 
    public Vector3 axisB;

    // Root of the quad-tree for the LOD system.
    public Chunk parentChunk;
    // List of all visible members of the quad-tree.
    public List<Chunk> visibleChildren = new List<Chunk>();

    // Containers for the chunks generated by this face. One for terrain and another for water.
    public GameObject terrainFaceContainer, waterFaceContainer;

    // Reference to the planet script and radius (planetDiameter / 2).
    public Planet planetScript;
    public float radius;

    // Each face is assigned an ID to help differentiate the names.
    private uint ID;
    // A static reference to the ID is necessary so we can ensure they are unique. 
    private static uint faceID = 0;
    // Reference to the water material used by this face.
    // It's specific to each face because the water depends on the localUp variable.
    private Material localWaterMaterial;

    public PlanetFace(Vector3 localUp, Planet planet)
    {
        // Assign parameters to referenced variables.
        this.localUp = localUp;
        planetScript = planet;

        // Assign and increment the ID.
        ID = faceID++;
        radius = planetScript.planetDiameter / 2.0f;

        // Calculate the local x- and z- axes given localUp (y-axis)
        axisA = new Vector3(localUp.y, localUp.z, localUp.x);
        axisB = Vector3.Cross(localUp, axisA);

        // Create the container for all the terrain chunks generated by this face.
        terrainFaceContainer = new GameObject("TerrainFace [" + ID + "]");
        terrainFaceContainer.transform.parent = planetScript.terrainContainer.transform;

        // Create the container for all the water chunks generated by this face.
        waterFaceContainer = new GameObject("WaterFace [" + ID + "]");
        waterFaceContainer.transform.parent = planetScript.waterContainer.transform;

        // Create a new instance of the water material and set the local up direction.
        localWaterMaterial = new Material(planetScript.waterMaterial);
        localWaterMaterial.SetVector("_LocalUp", localUp);
        localWaterMaterial.SetInt("_Tessellation_Factor", planetScript.tessellationFactor);
    }

    // Externally visible method for creating the meshes.
    public void ConstructMesh(Chunk chunk)
    {
        // Only draw the mesh if that option is enabled.
        if (planetScript.drawTerrainFaces) ConstructTerrainMesh(chunk);
        if (planetScript.drawWaterFaces) ConstructWaterMesh(chunk);
    }

    // Internally visible method for creating the terrain mesh.
    private void ConstructTerrainMesh(Chunk chunk)
    {
        // Construct the terrain container if it does not exist
        if (terrainFaceContainer == null && planetScript.terrainContainer != null)
        {
            terrainFaceContainer = new GameObject("TerrainFace [" + ID + "]");
            terrainFaceContainer.transform.parent = planetScript.terrainContainer.transform;
        }
        // Construct the terrain chunk 
        if (chunk.terrainGameObject == null)
        {
            chunk.terrainGameObject = new GameObject("Terrain_Grid_Cell_" + chunk.ID);
            chunk.terrainGameObject.transform.parent = terrainFaceContainer.transform;

            // Construct the terrain mesh
            if (chunk.terrainMesh == null) chunk.terrainMesh = new Mesh();
            planetScript.terrainMaterial.SetTexture("_Albedo_Array", planetScript.biomes.biomes_albArr);
            planetScript.terrainMaterial.SetTexture("_Normal_Array", planetScript.biomes.biomes_normArr);
            planetScript.terrainMaterial.SetTexture("_Occlusion_Array", planetScript.biomes.biomes_occArr);
            planetScript.terrainMaterial.SetTexture("_Smoothness_Array", planetScript.biomes.biomes_smoothArr);
            planetScript.terrainMaterial.SetTexture("_Metallic_Array", planetScript.biomes.biomes_metallicArr);
            planetScript.terrainMaterial.SetFloat("_Water_Height", planetScript.seaLevel);
            planetScript.terrainMaterial.SetFloat("_Shore_Fade", planetScript.biomes.biomeSettings.shoreFade);
            planetScript.terrainMaterial.SetFloat("_Shoreline_Offset", planetScript.biomes.biomeSettings.shoreOffset);
            planetScript.terrainMaterial.SetInt("_Tessellation_Factor", planetScript.tessellationFactor);
            if (chunk.terrainGameObject.GetComponent<MeshRenderer>() == null) chunk.terrainGameObject.AddComponent<MeshRenderer>().sharedMaterial = planetScript.terrainMaterial;
            if (chunk.terrainGameObject.GetComponent<MeshFilter>() == null) chunk.terrainGameObject.AddComponent<MeshFilter>();
            if (chunk.terrainMeshFilter == null) chunk.terrainMeshFilter = chunk.terrainGameObject.GetComponent<MeshFilter>();
            chunk.terrainMeshFilter.mesh = chunk.terrainMesh;
            chunk.terrainMesh.Clear();
            chunk.terrainMesh.vertices = chunk.terrainOptimizer.vertices;
            chunk.terrainMesh.triangles = chunk.terrainOptimizer.triangles;
            chunk.terrainMesh.colors = chunk.terrainOptimizer.colors;
            chunk.terrainMesh.uv = chunk.terrainOptimizer.UV1;
            chunk.terrainMesh.uv2 = chunk.terrainOptimizer.UV2;
            chunk.terrainMesh.uv3 = chunk.terrainOptimizer.UV3;
            chunk.terrainMesh.uv4 = chunk.terrainOptimizer.UV4;
            chunk.terrainMesh.RecalculateBounds();
            chunk.terrainMesh.RecalculateNormals();

            // Add or update the collider
            try
            {
                if (chunk.terrainGameObject.GetComponent<MeshCollider>() == null) chunk.terrainGameObject.AddComponent<MeshCollider>();
                chunk.terrainGameObject.GetComponent<MeshCollider>().material = planetScript.physicsMaterial;
                chunk.terrainGameObject.GetComponent<MeshCollider>().sharedMesh = chunk.terrainMesh;
                chunk.terrainGameObject.GetComponent<MeshCollider>().convex = planetScript.useConvexColliders;
            }
            catch (System.Exception e)
            {
                Debug.Log("Invalid mesh collider: " + e.Message);
            }
        }
    }

    // Internally visible method for creating the water mesh.s
    private void ConstructWaterMesh(Chunk chunk)
    {
        // Construct the terrain gameobject
        if (waterFaceContainer == null && planetScript.waterContainer != null)
        {
            waterFaceContainer = new GameObject("WaterFace [" + ID + "]");
            waterFaceContainer.transform.parent = planetScript.waterContainer.transform;
        }
        // Construct the water chunk
        if (chunk.waterGameObject == null)
        {
            chunk.waterGameObject = new GameObject("Water_Grid_Cell_" + chunk.ID);
            chunk.waterGameObject.transform.parent = waterFaceContainer.transform;
            chunk.waterGameObject.layer = LayerMask.NameToLayer("Water");

            // Construct the water mesh
            if (chunk.waterMesh == null) chunk.waterMesh = new Mesh();
            chunk.waterMesh.indexFormat = UnityEngine.Rendering.IndexFormat.UInt32;
            if (chunk.waterGameObject.GetComponent<MeshRenderer>() == null) chunk.waterGameObject.AddComponent<MeshRenderer>().sharedMaterial = localWaterMaterial;
            chunk.waterGameObject.GetComponent<MeshRenderer>().shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.Off;
            if (chunk.waterGameObject.GetComponent<MeshFilter>() == null) chunk.waterGameObject.AddComponent<MeshFilter>();
            if (chunk.waterMeshFilter == null) chunk.waterMeshFilter = chunk.waterGameObject.GetComponent<MeshFilter>();
            chunk.waterMeshFilter.mesh = chunk.waterMesh;
            chunk.waterMesh.Clear();
            chunk.waterMesh.vertices = chunk.terrainOptimizer.waterVertices;
            chunk.waterMesh.triangles = chunk.terrainOptimizer.triangles;
            chunk.waterMesh.uv = chunk.terrainOptimizer.waterUVs;
            chunk.waterMesh.colors = chunk.terrainOptimizer.waterColors;
            chunk.waterMesh.RecalculateBounds();
            chunk.waterMesh.RecalculateNormals();
        }
    }

    // Call this during startup to initalize the LOD system.
    public void ConstructTree()
    {
        // Create the root of the quad-tree for the LOD system and then update it. 
        parentChunk = new Chunk(1, planetScript, this, null, localUp.normalized * radius, radius, 0, localUp, axisA, axisB, new byte[4], 0);
        UpdateTree();
    }

    // Call this during runtime to update the LOD system.
    public void UpdateTree()
    {
        // Updates the LOD system.
        parentChunk.GenerateChildren();
        // Updates which chunks we draw based on the updated LOD data.
        parentChunk.DrawVisibleChildren();
    }
}